apiVersion: v1
kind: Service
metadata:
  name: automating-metadata-prod
spec:
  selector:
    App: AutomatingMetadataProd
  ports:
    - port: 80
      targetPort: 5001
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: automating-metadata-prod
  labels:
    App: AutomatingMetadataProd
spec:
  replicas: 2
  revisionHistoryLimit: 8
  selector:
    matchLabels:
      App: AutomatingMetadataProd
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-status: 'update'
        vault.hashicorp.com/role: app-vault-reader
        vault.hashicorp.com/agent-inject-secret-config: secrets/desci-server/staging/db
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "secrets/automating-metadata/prod" -}}
          export OPENAI_API_KEY={{ .Data.OPENAI_API_KEY }}
          export crmailto={{ .Data.crmailto }}
          export pyalexemail={{ .Data.pyalexemail }}
          export AM_API_KEY={{ .Data.AM_API_KEY }}
          export IPFS_GATEWAY_URL={{ .Data.IPFS_GATEWAY_URL }}
         
          echo "dbset"; 
          {{- end -}}
      labels:
        App: AutomatingMetadataProd
    spec:
      containers:
        - image: 523044037273.dkr.ecr.us-east-2.amazonaws.com/automating-metadata-prod:latest
          name: automating-metadata-prod
          command: ['/bin/bash', '-c']
          args:
            - echo "SOURCING ENV"; source /vault/secrets/config; gunicorn -w 4 -b 0.0.0.0:5001 server:app
          ports:
            - containerPort: 5001
              name: server-api
          resources:
            limits:
              cpu: '1.0'
              memory: 5Gi
            requests:
              cpu: '0.8'
              memory: 5Gi
          # restart pod after failureThreshold*periodSeconds total seconds
          livenessProbe:
            httpGet:
              path: /
              port: server-api
            failureThreshold: 80
            periodSeconds: 3
          # temporarily stop sending traffic to pod after failureThreshold*periodSeconds total seconds
          readinessProbe:
            httpGet:
              path: /
              port: server-api
            failureThreshold: 3
            periodSeconds: 1
          # wait for pod to start for failureThreshold*periodSeconds total seconds
          startupProbe:
            httpGet:
              path: /
              port: server-api
            failureThreshold: 200
            periodSeconds: 1
      serviceAccountName: 'vault-auth'
